{"version":3,"sources":["container/App.module.css","components/sidenav/Sidenav.module.css","components/header/Header.js","components/sidenav/Sidenav.js","components/admissionform/AdmissionForm.js","components/feereceipt/FeeReceipt.js","container/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","AppBar","position","Toolbar","Typography","variant","noWrap","Component","Sidenav","state","menus","title","id","icon","open","submenus","handleMenuClick","element","menuIndex","findIndex","m","menu","setState","Drawer","className","classes","drawer","paper","drawerpaper","this","map","List","component","key","ListItem","button","onClick","ListItemIcon","ListItemText","primary","Collapse","in","timeout","unmountOnExit","disablePadding","submenu","props","onSubMenuClick","Divider","AdmissionForm","FeeReceipt","App","selectedSubMenu","handleSubMenuClick","subMenuId","console","log","root","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.faae9a3e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3F5ee\",\"root\":\"App_root__28TbV\",\"main-container\":\"App_main-container__1fJav\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawer\":\"Sidenav_drawer__2Eiob\",\"drawerpaper\":\"Sidenav_drawerpaper__2F9sN\"};","import React, {Component} from 'react'\nimport {AppBar, Toolbar} from '@material-ui/core'\nimport Typography from '@material-ui/core/Typography';\n\nexport default class Header extends Component {\n\n    render() {\n        return (\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <Typography variant=\"h6\" noWrap>\n                        Gurukul Education Institute\n                    </Typography>\n                </Toolbar> \n            </AppBar>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport Collapse from '@material-ui/core/Collapse';\nimport AccountBox from '@material-ui/icons/AccountBox';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport SubjectIcon from '@material-ui/icons/Subject';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport ReceiptIcon from '@material-ui/icons/Receipt';\nimport LibraryBooksIcon from '@material-ui/icons/LibraryBooks';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport classes from './Sidenav.module.css'\n\nclass Sidenav extends Component {\n\n    state = {\n        menus: [\n            {\n                title: \"Addmission\",\n                id: \"admission\",\n                icon: <AccountBox/>,\n                open: false,\n                submenus: [\n                    {\n                        title: \"New Admission\",\n                        id: \"new-admission\",\n                        icon: <PersonAddIcon/>\n                    }\n                ]\n            },\n            {\n                title: \"Accounts\",\n                id: \"accounts\",\n                icon: <SubjectIcon/>,\n                open: false,\n                submenus: [\n                    {\n                        title: \"Fee Receipt\",\n                        id: \"fee-receipt\",\n                        icon: <ReceiptIcon/>\n                    }\n                ]\n            },\n            {\n                title: \"Library\",\n                id: \"library\",\n                icon: <LibraryBooksIcon/>,\n                open: false,\n                submenus: [\n                    {\n                        title: \"Issue Book\",\n                        id: \"issue-book\",\n                        icon: <ArrowBackIcon/>\n                    },\n                    {\n                        title: \"Return Book\",\n                        id: \"return-book\",\n                        icon: <ArrowForwardIcon/>\n                    }\n                ]\n            }\n        ]\n    };\n\n    handleMenuClick = (element) => {\n        let menus = [...this.state.menus];\n        let menuIndex = menus.findIndex(m => {return m.id === element});\n        let menu = menus[menuIndex];\n        menu.open = !menu.open;\n        this.setState({menus});\n    }\n\n\n\n    render() {\n        return (<Drawer\n            className={classes.drawer}\n            variant=\"permanent\"\n            classes={{\n              paper: classes.drawerpaper,\n            }}\n            >\n                {this.state.menus.map(menu => {\n                    return(<List component=\"nav\" key={menu.id}className=\"padding0px\">\n                        <ListItem button onClick={() => this.handleMenuClick(menu.id)} >\n                            <ListItemIcon>{menu.icon}</ListItemIcon>\n                            <ListItemText primary={menu.title} />\n                            {menu.open ? <ExpandLess /> : <ExpandMore />}\n                        </ListItem>\n                        <Collapse in={menu.open} timeout=\"auto\" unmountOnExit>\n                            <List component=\"div\" disablePadding>\n                            {menu.submenus.map(submenu => {\n                                return(\n                                    <ListItem button onClick={() => this.props.onSubMenuClick(submenu.id)}  className=\"paddingleft30px\" key={submenu.id}>\n                                        <ListItemIcon>{submenu.icon}</ListItemIcon>\n                                        <ListItemText primary={submenu.title} />\n                                    </ListItem>\n                                );\n                            })}\n                            </List>\n                        </Collapse>\n                        <Divider/>\n                    </List>);\n                })}\n\n                \n            </Drawer>\n        );\n    }\n}\n\nexport default Sidenav;","import React, { Component } from \"react\";\nimport classes from \"./AdmissionForm.module.css\"\n\nexport default class AdmissionForm extends Component {\n\n  render() {\n    return (<div>Admission form</div>);\n  }\n\n}","import React, { Component } from \"react\";\nimport classes from \"./FeeReceipt.module.css\"\n\nexport default class FeeReceipt extends Component {\n\n  render() {\n    return (<div>Fee Receipt</div>);\n  }\n\n}","import React, {Component} from 'react';\nimport classes from './App.module.css';\nimport Header from '../components/header/Header';\nimport Sidenav from '../components/sidenav/Sidenav';\nimport AdmissionForm from '../components/admissionform/AdmissionForm'\nimport FeeReceipt from '../components/feereceipt/FeeReceipt';\n\nexport default class App extends Component {\n  \n  state = {\n\n    selectedSubMenu: \"new-admission\",\n  };\n\n  handleSubMenuClick = (subMenuId) => {\n    console.log(subMenuId);\n    this.setState({selectedSubMenu: subMenuId});\n  }\n\n  render() {\n    return (\n        <div className={classes.root}>\n          <Header/>\n          <Sidenav\n          onSubMenuClick={this.handleSubMenuClick}/>\n          \n          <main className={classes['main-container']}>\n            { this.state.selectedSubMenu === \"new-admission\" && <AdmissionForm/> }\n            { this.state.selectedSubMenu === \"fee-receipt\" && <FeeReceipt/> }\n          </main>\n        </div>\n      );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}